[tool.poetry]
name = "stable-baselines3"
version = "2.2.0a2"
description = "Pytorch version of Stable Baselines, implementations of reinforcement learning algorithms."
authors = ["Antonin Raffin <antonin.raffin@dlr.de>"]
readme = "README.md"
packages = [{include = "stable_baselines3"}]

keywords = [
    "reinforcement-learning-algorithms",
    "reinforcement-learning",
    "machine-learning",
    "gymnasium",
    "gym",
    "openai",
    "stable",
    "baselines",
    "toolbox",
    "python",
    "data-science"]
license = "MIT"
classifiers=[
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.urls]
Code = "https://github.com/DLR-RM/stable-baselines3"
Documentation = "https://stable-baselines3.readthedocs.io/"
Changelog = "https://stable-baselines3.readthedocs.io/en/master/misc/changelog.html"
SB3-Contrib = "https://github.com/Stable-Baselines-Team/stable-baselines3-contrib"
RL-Zoo = "https://github.com/DLR-RM/rl-baselines3-zoo"
SBX = "https://github.com/araffin/sbx"

[tool.poetry.dependencies]
python = ">=3.8"
gymnasium = ">=0.28.1,<0.30"
numpy = ">=1.20"
torch = ">=1.13"
cloudpickle = "*"
pandas = "*"
matplotlib = "*"
pytest = {version = "*", optional = true}
pytest-cov = {version = "*", optional = true}
pytest-env = {version = "*", optional = true}
pytest-xdist = {version = "*", optional = true}
pytype = {version = "*", optional = true}
mypy = {version = "*", optional = true}
ruff = {version = "*", optional = true}
isort = {version = ">=5.0", optional = true}
black = {version = "*", optional = true}
sphinx = {version = ">=5.3,<7.0", optional = true}
sphinx-autobuild = {version = "*", optional = true}
sphinx-rtd-theme = {version = "*", optional = true}
"sphinxcontrib.spelling" = {version = "*", optional = true}
sphinx-autodoc-typehints = {version = "*", optional = true}
sphinx_copybutton = {version = "*", optional = true}
autorom = {version = "~=0.6.1", extras=["accept-rom-license"], optional = true}
tqdm = "^4.66.1"
toml = "^0.10.2"
tensorboard = "^2.14.0"

[tool.poetry.extras]
tests = [
            # Run tests and coverage
            "pytest",
            "pytest-cov",
            "pytest-env",
            "pytest-xdist",
            # Type check
            "pytype",
            "mypy",
            # Lint code (flake8 replacement)
            "ruff",
            # Sort imports
            "isort",
            # Reformat
            "black",
        ]
docs = [
    "sphinx",
    "sphinx-autobuild",
    "sphinx-rtd-theme",
    # For spelling
    "sphinxcontrib.spelling",
    # Type hints support
    "sphinx-autodoc-typehints",
    # Copy button for code snippets
    "sphinx_copybutton",
]

extra = ["autorom", "tqdm", "tensorboard"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Same as Black.
line-length = 127
# Assume Python 3.8
target-version = "py38"
# See https://beta.ruff.rs/docs/rules/
select = ["E", "F", "B", "UP", "C90", "RUF"]
# B028: Ignore explicit stacklevel`
# RUF013: Too many false positives (implicit optional)
ignore = ["B028", "RUF013"]

[tool.ruff.per-file-ignores]
# Default implementation in abstract methods
"./stable_baselines3/common/callbacks.py"= ["B027"]
"./stable_baselines3/common/noise.py"= ["B027"]
# ClassVar, implicit optional check not needed for tests
"./tests/*.py"= ["RUF012", "RUF013"]


[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.black]
line-length = 127

[tool.pytype]
inputs = ["stable_baselines3"]
disable = ["pyi-error"]

[tool.mypy]
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true
exclude = """(?x)(
    stable_baselines3/common/buffers.py$
    | stable_baselines3/common/distributions.py$
    | stable_baselines3/common/off_policy_algorithm.py$
    | stable_baselines3/common/policies.py$
    | stable_baselines3/common/vec_env/__init__.py$
    | stable_baselines3/common/vec_env/vec_normalize.py$
    | stable_baselines3/her/her_replay_buffer.py$
    | tests/test_logger.py$
    | tests/test_train_eval_mode.py$
  )"""

[tool.pytest.ini_options]
# Deterministic ordering for tests; useful for pytest-xdist.
env = [
	"PYTHONHASHSEED=0"
]

filterwarnings = [
    # Tensorboard warnings
    "ignore::DeprecationWarning:tensorboard",
    # Gymnasium warnings
    "ignore::UserWarning:gymnasium",
]
markers = [
    "expensive: marks tests as expensive (deselect with '-m \"not expensive\"')"
]

[tool.coverage.run]
disable_warnings = ["couldnt-parse"]
branch = false
omit = [
  "tests/*",
  "setup.py",
  # Require graphical interface
  "stable_baselines3/common/results_plotter.py",
  # Require ffmpeg
  "stable_baselines3/common/vec_env/vec_video_recorder.py",
]

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "raise NotImplementedError()", "if typing.TYPE_CHECKING:"]